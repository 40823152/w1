<h1>About</h1>
<p>test</p>
<p>四設計四甲</p>
<p>40823152 | 黃暐翰</p>
<p>replit    : <a href="https://replit.com/@40823152/w15">url</a></p>
<p><a href="https://replit.com/~"><img src="/images/replit.png"/></a></p>
<p>github  : <a href="https://github.com/40823152/w15">url</a></p>
<p><a href="https://github.com/"><img src="/images/github.png"/></a></p>
<p></p><h1>w15</h1>
<p></p>
<p><img alt="" height="454" src="/images/about_replit.png" width="797"/></p><h2>Github_new_repository</h2>
<p></p>
<p>Github -&gt; New(Top Respositorie) -&gt; Repository name -&gt; create <span> repository</span></p>
<div class="Box-sc-g0xbh4-0 bYQyDU"></div>
<p></p>
<p>github repository</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/40823152/w15.git
git push -u origin main</pre>
<p></p>
<p></p>
<hr/>
<p>To create a new repository on GitHub, follow these steps:</p>
<ol>
<li>
<p>Sign in to your GitHub account. If you don't have an account, you can create one for free at <a href="https://github.com/join" target="_new">https://github.com/join</a>.</p>
</li>
<li>
<p>Once signed in, click on the "+" button in the top-right corner of the GitHub interface. A dropdown menu will appear.</p>
</li>
<li>
<p>From the dropdown menu, select "New repository." You will be taken to the "Create a new repository" page.</p>
</li>
<li>
<p>On the "Create a new repository" page, provide the following information:</p>
<ul>
<li>Repository name: Choose a unique and descriptive name for your repository.</li>
<li>Description (optional): Add a brief description to help others understand the purpose of your repository.</li>
<li>Visibility: Choose whether you want your repository to be public (visible to everyone), private (visible only to you and collaborators you specify), or internal (visible to members of your organization).</li>
<li>Initialize this repository with a README: If you want to include a README file, which is helpful for providing project information, instructions, or documentation, check this option.</li>
<li>Add .gitignore: If your project requires ignoring certain files or directories (e.g., logs, dependencies, or build artifacts), select the appropriate .gitignore template.</li>
<li>Choose a license (optional): If you want to specify a license for your repository, choose one from the provided options.</li>
</ul>
</li>
<li>
<p>Once you have filled in the necessary information, click on the "Create repository" button at the bottom of the page.</p>
</li>
</ol>
<p>Congratulations! You have successfully created a new repository on GitHub. You can now start adding files, making commits, and collaborating with others on your project.</p>
<p></p>
<p></p>
<h2>replit_new_repository</h2>
<p></p>
<p>Create a Repl -&gt; <span>Template 'Python' -&gt; Title 'name'  -&gt; Create a Repl</span></p>
<p><span></span></p>
<p><span>The following image shows the screenshot after successfully creating a repository on Replit.</span></p>
<p><img alt="" height="373" src="/images/replit_test.png" width="800"/></p>
<p></p>
<hr/>
<p>To create a new repository on Replit, you can follow these steps:</p>
<ol>
<li>
<p>Sign in to your Replit account. If you don't have an account, you can create one for free at <a href="https://replit.com/signup" target="_new">https://replit.com/signup</a>.</p>
</li>
<li>
<p>Once signed in, you will be taken to your Replit dashboard. Click on the "+" button in the top-right corner of the interface. A dropdown menu will appear.</p>
</li>
<li>
<p>From the dropdown menu, select "New Repl." You will be taken to the "Create a new repl" page.</p>
</li>
<li>
<p>On the "Create a new repl" page, provide the following information:</p>
<ul>
<li>Choose a language: Select the programming language you want to use for your repository. Replit supports a wide range of programming languages and frameworks.</li>
<li>Choose a template (optional): If you want to start with a pre-configured template or framework, you can select one from the provided options. This step is optional, and you can also start with a blank repl.</li>
<li>Give your repl a name: Choose a unique and descriptive name for your repository.</li>
</ul>
</li>
<li>
<p>Once you have filled in the necessary information, click on the "Create Repl" button at the bottom of the page.</p>
</li>
</ol>
<p>Congratulations! You have successfully created a new repository (repl) on Replit. You can now start coding, adding files, and collaborating with others on your project.</p>
<p></p>
<h2>cmsimde</h2><h1>Bython</h1><h2>1. Bython reads exam scores</h2>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<div></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw5.txt">1aw5.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6.txt">1aw6.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw6-2.txt">1aw6-2.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/075c06b2baf1bb07665f1a98e9f88f7e81ebe1a4/1aw8.txt">1aw8.txt</a></div>
<div><a href="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/07f0f0817115a68d55d6ca603c5ab393/raw/239f4eb84715978daead6ac1f231af7f190a2a5e/1aw9.txt">1aw9.txt</a></div>
<hr/>
<p></p>
<p><button id="add1to100part2">1aW5</button><button id="cango_three_gears">1aW6</button><button id="bsnake">1aW6-2</button><button id="aitetris">1aW8 </button><button id="threejsblock">1aW9 </button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/40823152/c7eaea66b097c0e47d9a144b4f0eab17/raw/e0ade4a9da6a631c0953000b49c2cb9041f16384/get_score"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/40823152/c7eaea66b097c0e47d9a144b4f0eab17/raw/e0ade4a9da6a631c0953000b49c2cb9041f16384/get_score"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/40823152/d2e9c4d2e571ee185de141ac45fe9c3b/raw/1938e2930b9193065f80bb3b7edf9ee615893275/get_score_1aw6"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/40823152/cb5754fc06c706c1bb59e7a8ca980583/raw/5f32e7172c77e6a28fe446db90d56d21f22dfcef/get_score_1aw6-2"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/40823152/dc3e395c11bf85bb566f6405684ca9b6/raw/8a9c5096474f7d223ce0325e3c88baaa2b3d69ed/get_score_1aw8"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/40823152/097671b1fc594300bb179227ddcccef5/raw/6093d3fe28045a83433a66db6398f734cdece562/get_score_1aw9"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2" style="width: 315px; height: 116px;"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<h2>2</h2>
<p></p>
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/']});
}
</script>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator<span> </span><a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<div class="ace_editor ace-tm" id="kw_editor1">
<div></div>
<textarea autocapitalize="off" autocorrect="off" class="ace_text-input" spellcheck="false" wrap="off"></textarea>
<div aria-hidden="true" class="ace_gutter">
<div class="ace_layer ace_gutter-layer ace_folding-enabled">
<div class="ace_gutter-cell">1</div>
<div class="ace_gutter-cell">2</div>
</div>
<div class="ace_gutter-active-line"></div>
</div>
<div class="ace_scroller">
<div class="ace_content">
<div class="ace_layer ace_print-margin-layer">
<div class="ace_print-margin"></div>
</div>
<div class="ace_layer ace_marker-layer"></div>
<div class="ace_layer ace_text-layer">
<div class="ace_line"><span class="ace_support ace_function">sum</span> <span class="ace_keyword ace_operator">=</span> <span class="ace_constant ace_numeric">1</span><span class="ace_keyword ace_operator">+</span><span class="ace_constant ace_numeric">2</span><span class="ace_keyword ace_operator">+</span><span class="ace_constant ace_numeric">3</span><span class="ace_keyword ace_operator">+</span><span class="ace_constant ace_numeric">4</span><span class="ace_keyword ace_operator">+</span><span class="ace_constant ace_numeric">5</span><span class="ace_keyword ace_operator">+</span><span class="ace_constant ace_numeric">6</span><span class="ace_keyword ace_operator">+</span><span class="ace_constant ace_numeric">7</span><span class="ace_keyword ace_operator">+</span><span class="ace_constant ace_numeric">8</span><span class="ace_keyword ace_operator">+</span><span class="ace_constant ace_numeric">9</span><span class="ace_keyword ace_operator">+</span><span class="ace_constant ace_numeric">10</span></div>
<div class="ace_line"><span class="ace_support ace_function">print</span><span class="ace_paren ace_lparen">(</span><span class="ace_support ace_function">sum</span><span class="ace_paren ace_rparen">)</span></div>
</div>
<div class="ace_layer ace_marker-layer"></div>
<div class="ace_layer ace_cursor-layer ace_hidden-cursors">
<div class="ace_cursor"></div>
</div>
</div>
</div>
<div>
<div></div>
<div></div>
</div>
</div>
<p></p>
<p></p>
<form><label>Filename:<span> </span><input id="kw_filename" placeholder="input file name" type="text"/>.py</label><span> </span><input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p></p>
<p></p>
<p></p>
<p><button id="kw_run1">Run</button><span> </span><button id="kw_show_console1">Output</button><span> </span><button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p></p>
<p></p>
<p></p>
<div></div>
<script type="text/python3">
# 從 Brython 的 browser 模組導入 document 與 html 程式庫
from browser import document, html
 
brython_div1 = document["brython_div1"]
try:
    c = document.query["c"]
except:
    c = "1a"
url = "https://mde.tw/studlist/2023spring/" + c + ".txt"
data = open(url).read().split("\n")
url_template = "https://mdewcm2023.github.io/site-"
repo_template = "https://github.com/mdewcm2023/site-"
for i in data[1:-1]:
    num_github = i.split("\t")
    num =  num_github[0]
    try:
        github = num_github[1]
    except:
        github = str(num)
    #print(num, github)
    try:
        #print(num, github)
        url_link = html.A(str(num), href=url_template + str(github))
        repo_link = html.A("repo", href=repo_template + str(github))
    except:
        # no github added yet
        url_link = html.A(str(num), href=url_template + str(num))
        repo_link = html.A("repo", href=repo_template + str(num))
    brython_div1 <= url_link
    brython_div1 <= " (" + repo_link + ")"
    brython_div1 <= html.BR()
</script>